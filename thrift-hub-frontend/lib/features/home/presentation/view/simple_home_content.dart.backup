import 'package:flutter/material.dart';
import 'package:dio/dio.dart';
import '../../../../core/constants/api_constants.dart';
import '../../../../core/theme/vapor_colors.dart';
import '../../../../core/utils/image_utils.dart';
import '../../../trips/presentation/view/trip_detail_page.dart';

class SimpleHomeContent extends StatefulWidget {
  const SimpleHomeContent({super.key});

  @override
  State<SimpleHomeContent> createState() => _SimpleHomeContentState();
}

class _SimpleHomeContentState extends State<SimpleHomeContent> {
  List<dynamic> _products = [];
  bool _isLoading = true;
  String _error = '';

  @override
  void initState() {
    super.initState();
    print('SimpleHomeContent: initState called');
    _loadProducts();
  }

  Future<void> _loadProducts() async {
    try {
      print('SimpleHomeContent: Fetching products...');
      setState(() {
        _isLoading = true;
        _error = '';
      });

      final dio = Dio();
      
      // Try the featured products endpoint first
      final response = await dio.get('${ApiConstants.baseUrl}/products/featured/list');
      
      print('SimpleHomeContent: Response status: ${response.statusCode}');
      print('SimpleHomeContent: Response body: ${response.data}');
      
      if (response.statusCode == 200) {
        // Check if response has products array or is directly an array
        List<dynamic> productsData;
        
        if (response.data is List) {
          productsData = response.data;
        } else if (response.data is Map && response.data['products'] != null) {
          productsData = response.data['products'];
        } else if (response.data is Map && response.data['data'] != null) {
          productsData = response.data['data'];
        } else {
          throw Exception('Invalid response format');
        }
        
        if (productsData.isNotEmpty) {
          setState(() {
            _products = productsData;
            _isLoading = false;
          });
          print('SimpleHomeContent: Loaded ${_products.length} products');
        } else {
          throw Exception('No products found');
        }
      } else {
        throw Exception('Server returned ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error loading products: $e');
      setState(() {
        _error = 'Failed to load products';
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    print('SimpleHomeContent: build method called');
    
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              VaporColors.cloud,
              Colors.white,
            ],
          ),
        ),
        child: CustomScrollView(
          slivers: [
            SliverAppBar(
              expandedHeight: 200.0,
              floating: false,
              pinned: true,
              backgroundColor: VaporColors.primary,
              flexibleSpace: FlexibleSpaceBar(
                title: Text(
                  'Premium Vape Products',
                  style: TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                background: Container(
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                      colors: [
                        VaporColors.primary,
                        VaporColors.secondary,
                        VaporColors.accent,
                      ],
                    ),
                  ),
                  child: Center(
                    child: Icon(
                      Icons.cloud,
                      size: 80,
                      color: Colors.white.withOpacity(0.3),
                    ),
                  ),
                ),
              ),
            ),
            
            if (_isLoading)
              SliverFillRemaining(
                child: Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      CircularProgressIndicator(
                        valueColor: AlwaysStoppedAnimation<Color>(VaporColors.accent),
                      ),
                      SizedBox(height: 16),
                      Text(
                        'Loading premium products...',
                        style: TextStyle(
                          color: VaporColors.textSecondary,
                          fontSize: 16,
                        ),
                      ),
                    ],
                  ),
                ),
              )
            else if (_error.isNotEmpty)
              SliverFillRemaining(
                child: Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(
                        Icons.error_outline,
                        size: 64,
                        color: VaporColors.error,
                      ),
                      SizedBox(height: 16),
                      Text(
                        _error,
                        style: TextStyle(
                          color: VaporColors.error,
                          fontSize: 18,
                        ),
                      ),
                      SizedBox(height: 16),
                      ElevatedButton(
                        onPressed: _loadProducts,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: VaporColors.accent,
                          foregroundColor: Colors.white,
                        ),
                        child: Text('Retry'),
                      ),
                    ],
                  ),
                ),
              )
            else if (_products.isEmpty)
              SliverFillRemaining(
                child: Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Container(
                        width: 120,
                        height: 120,
                        decoration: BoxDecoration(
                          color: VaporColors.accent.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(60),
                        ),
                        child: Icon(
                          Icons.cloud_off,
                          size: 60,
                          color: VaporColors.accent,
                        ),
                      ),
                      SizedBox(height: 24),
                      Text(
                        'No products available',
                        style: TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                          color: VaporColors.textPrimary,
                        ),
                      ),
                      SizedBox(height: 8),
                      Text(
                        'Check back later for new arrivals!',
                        style: TextStyle(
                          fontSize: 16,
                          color: VaporColors.textSecondary,
                        ),
                      ),
                    ],
                  ),
                ),
              )
            else
              SliverPadding(
                padding: EdgeInsets.all(16),
                sliver: SliverGrid(
                  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: 2,
                    childAspectRatio: 0.75,
                    crossAxisSpacing: 16,
                    mainAxisSpacing: 16,
                  ),
                  delegate: SliverChildBuilderDelegate(
                    (context, index) {
                      final product = _products[index];
                      print('SimpleHomeContent: Building product ${product?['name'] ?? 'Unknown'}');
                      return _buildProductCard(product);
                    },
                    childCount: _products.length,
                  ),
                ),
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildProductCard(dynamic product) {
    // Safely extract product data
    final String productId = product?['_id']?.toString() ?? product?['id']?.toString() ?? '';
    final String productName = product?['name']?.toString() ?? 'Unknown Product';
    final String productBrand = product?['brand']?.toString() ?? '';
    final String productDescription = product?['description']?.toString() ?? '';
    final double productPrice = double.tryParse(product?['price']?.toString() ?? '0') ?? 0.0;
    final String productImage = product?['image']?.toString() ?? product?['imageUrl']?.toString() ?? '';
    final double productRating = double.tryParse(product?['rating']?.toString() ?? '4.0') ?? 4.0;
    
    return GestureDetector(
      onTap: () {
        print('SimpleHomeContent: Tapped on product $productName');
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => TripDetailPage(
              trip: {
                'id': productId,
                'title': productName,
                'description': productDescription,
                'price': '\$${productPrice.toStringAsFixed(2)}',
                'image': ImageUtils.getImageUrl(productImage),
                'location': 'Vapor Store',
                'rating': productRating.toString(),
              },
            ),
          ),
        );
      },
      child: Card(
        elevation: 8,
        shadowColor: VaporColors.primary.withOpacity(0.2),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
        child: Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(16),
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                Colors.white,
                VaporColors.cloud,
              ],
            ),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Product Image
              Expanded(
                flex: 3,
                child: Container(
                  width: double.infinity,
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
                  ),
                  child: ClipRRect(
                    borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
                    child: Image.network(
                      ImageUtils.getImageUrl(productImage),
                      fit: BoxFit.cover,
                      errorBuilder: (context, error, stackTrace) {
                        return Container(
                          color: VaporColors.cloud,
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Icon(
                                Icons.cloud,
                                size: 40,
                                color: VaporColors.accent,
                              ),
                              SizedBox(height: 8),
                              Text(
                                'VAPOR VISTA',
                                style: TextStyle(
                                  fontSize: 10,
                                  fontWeight: FontWeight.bold,
                                  color: VaporColors.accent,
                                ),
                              ),
                            ],
                          ),
                        );
                      },
                      loadingBuilder: (context, child, loadingProgress) {
                        if (loadingProgress == null) return child;
                        return Container(
                          color: VaporColors.cloud,
                          child: Center(
                            child: CircularProgressIndicator(
                              valueColor: AlwaysStoppedAnimation<Color>(VaporColors.accent),
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                ),
              ),
              
              // Product Info
              Expanded(
                flex: 2,
                child: Padding(
                  padding: EdgeInsets.all(12),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Product Name
                      Text(
                        productName,
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                          color: VaporColors.textPrimary,
                        ),
                        maxLines: 2,
                        overflow: TextOverflow.ellipsis,
                      ),
                      
                      SizedBox(height: 4),
                      
                      // Brand
                      if (productBrand.isNotEmpty)
                        Text(
                          productBrand,
                          style: TextStyle(
                            fontSize: 12,
                            color: VaporColors.textSecondary,
                          ),
                        ),
                      
                      Spacer(),
                      
                      // Price and Rating
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            '\$${productPrice.toStringAsFixed(2)}',
                            style: TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                              color: VaporColors.accent,
                            ),
                          ),
                          Row(
                            children: [
                              Icon(
                                Icons.star,
                                size: 14,
                                color: Colors.amber,
                              ),
                              SizedBox(width: 2),
                              Text(
                                productRating.toStringAsFixed(1),
                                style: TextStyle(
                                  fontSize: 12,
                                  color: VaporColors.textSecondary,
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}